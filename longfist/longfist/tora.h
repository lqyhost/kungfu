// auto generated by struct_info_parser.py, please DO NOT edit!!!

#ifndef LONGFIST_UTIL_TORA_H
#define LONGFIST_UTIL_TORA_H

#include "../tora/TORATstpUserApiStruct.h"
#include "LFDataStruct.h"
#include "../tora/level2md/TORATstpUserApiStruct.h"
#define KUNGFU_LF_TORA
#include "longfist/transfer_m.h"


inline struct LFMarketDataField parseFrom(const struct CTORATstpMarketDataField& ori)
{
	struct LFMarketDataField res = {};
	memcpy(res.TradingDay, ori.TradingDay, 9);
	memcpy(res.InstrumentID, ori.SecurityID, 31);
	FromToraExchangeId(res.ExchangeID, ori.ExchangeID);
	memcpy(res.ExchangeInstID, ori.ExchangeInstID, 31);
	res.LastPrice = ori.LastPrice;
	res.PreClosePrice = ori.PreClosePrice;
	res.OpenPrice = ori.OpenPrice;
	res.HighestPrice = ori.HighestPrice;
	res.LowestPrice = ori.LowestPrice;
	res.Volume = ori.Volume;
	res.Turnover = ori.Turnover;
	res.OpenInterest = ori.OpenInterest;
	res.ClosePrice = ori.ClosePrice;
	res.UpperLimitPrice = ori.UpperLimitPrice;
	res.LowerLimitPrice = ori.LowerLimitPrice;
	memcpy(res.UpdateTime, ori.UpdateTime, 9);
	res.UpdateMillisec = ori.UpdateMillisec;
	res.BidPrice1 = ori.BidPrice1;
	res.BidVolume1 = ori.BidVolume1;
	res.AskPrice1 = ori.AskPrice1;
	res.AskVolume1 = ori.AskVolume1;
	res.BidPrice2 = ori.BidPrice2;
	res.BidVolume2 = ori.BidVolume2;
	res.AskPrice2 = ori.AskPrice2;
	res.AskVolume2 = ori.AskVolume2;
	res.BidPrice3 = ori.BidPrice3;
	res.BidVolume3 = ori.BidVolume3;
	res.AskPrice3 = ori.AskPrice3;
	res.AskVolume3 = ori.AskVolume3;
	res.BidPrice4 = ori.BidPrice4;
	res.BidVolume4 = ori.BidVolume4;
	res.AskPrice4 = ori.AskPrice4;
	res.AskVolume4 = ori.AskVolume4;
	res.BidPrice5 = ori.BidPrice5;
	res.BidVolume5 = ori.BidVolume5;
	res.AskPrice5 = ori.AskPrice5;
	res.AskVolume5 = ori.AskVolume5;
	return res;
}

inline struct LFL2MarketDataField parseFrom(const struct CTORATstpLev2MarketDataField& ori)
{
	struct LFL2MarketDataField res = {};
	memcpy(res.InstrumentID, ori.SecurityID, 31);
	res.PreClosePrice = ori.PreClosePrice;
	res.OpenPrice = ori.OpenPrice;
	res.ClosePrice = ori.ClosePrice;
	res.HighPrice = ori.HighestPrice;
	res.LowPrice = ori.LowestPrice;
	res.LastPrice = ori.LastPrice;
	res.TradeCount = ori.NumTrades;
	res.TotalTradeVolume = ori.TotalVolumeTrade;
	res.TotalTradeValue = ori.TotalValueTrade;
	res.TotalBidVolume = ori.TotalBidVolume;
	res.WeightedAvgBidPrice = ori.AvgBidPrice;
	res.TotalOfferVolume = ori.TotalAskVolume;
	res.WeightedAvgOfferPrice = ori.AvgAskPrice;
	res.BidPrice1 = ori.BidPrice1;
	res.BidVolume1 = ori.BidVolume1;
	res.BidPrice2 = ori.BidPrice2;
	res.BidVolume2 = ori.BidVolume2;
	res.BidPrice3 = ori.BidPrice3;
	res.BidVolume3 = ori.BidVolume3;
	res.BidPrice4 = ori.BidPrice4;
	res.BidVolume4 = ori.BidVolume4;
	res.BidPrice5 = ori.BidPrice5;
	res.BidVolume5 = ori.BidVolume5;
	res.BidPrice6 = ori.BidPrice6;
	res.BidVolume6 = ori.BidVolume6;
	res.BidPrice7 = ori.BidPrice7;
	res.BidVolume7 = ori.BidVolume7;
	res.BidPrice8 = ori.BidPrice8;
	res.BidVolume8 = ori.BidVolume8;
	res.BidPrice9 = ori.BidPrice9;
	res.BidVolume9 = ori.BidVolume9;
	res.BidPriceA = ori.BidPrice10;
	res.BidVolumeA = ori.BidVolume10;
	res.OfferPrice1 = ori.AskPrice1;
	res.OfferVolume1 = ori.AskVolume1;
	res.OfferPrice2 = ori.AskPrice2;
	res.OfferVolume2 = ori.AskVolume2;
	res.OfferPrice3 = ori.AskPrice3;
	res.OfferVolume3 = ori.AskVolume3;
	res.OfferPrice4 = ori.AskPrice4;
	res.OfferVolume4 = ori.AskVolume4;
	res.OfferPrice5 = ori.AskPrice5;
	res.OfferVolume5 = ori.AskVolume5;
	res.OfferPrice6 = ori.AskPrice6;
	res.OfferVolume6 = ori.AskVolume6;
	res.OfferPrice7 = ori.AskPrice7;
	res.OfferVolume7 = ori.AskVolume7;
	res.OfferPrice8 = ori.AskPrice8;
	res.OfferVolume8 = ori.AskVolume8;
	res.OfferPrice9 = ori.AskPrice9;
	res.OfferVolume9 = ori.AskVolume9;
	res.OfferPriceA = ori.AskPrice10;
	res.OfferVolumeA = ori.AskVolume10;
	res.UpperLimitPrice = ori.UpperLimitPrice;
	res.LowerLimitPrice = ori.LowerLimitPrice;
	return res;
}

inline struct LFL2IndexField parseFrom(const struct CTORATstpLev2IndexField& ori)
{
	struct LFL2IndexField res = {};
	memcpy(res.InstrumentID, ori.SecurityID, 31);
	res.PreCloseIndex = ori.PreCloseIndex;
	res.OpenIndex = ori.OpenIndex;
	res.HighIndex = ori.HighIndex;
	res.LowIndex = ori.LowIndex;
	res.LastIndex = ori.LastIndex;
	res.TurnOver = ori.Turnover;
	res.TotalVolume = ori.TotalVolumeTraded;
	return res;
}

inline struct LFL2OrderField parseFrom(const struct CTORATstpLev2OrderDetailField& ori)
{
	struct LFL2OrderField res = {};
	memcpy(res.InstrumentID, ori.SecurityID, 31);
	res.OrderGroup = ori.MainSeq;
	res.OrderIndex = ori.SubSeq;
	res.Price = ori.Price;
	res.Volume = ori.Volume;
	res.Side = ori.Side;
	res.OrderKind = ori.OrderType;
	return res;
}

inline struct LFL2TradeField parseFrom(const struct CTORATstpLev2TransactionField& ori)
{
	struct LFL2TradeField res = {};
	memcpy(res.InstrumentID, ori.SecurityID, 31);
	res.TradeGroup = ori.MainSeq;
	res.TradeIndex = ori.SubSeq;
	res.BidNo = ori.BuyNo;
	res.AskNo = ori.SellNo;
	res.Price = ori.TradePrice;
	res.Volume = ori.TradeVolume;
	res.Exec = ori.ExecType;
	res.BSFlag = LF_CHAR_BsUnknown;
	return res;
}

inline struct LFQryPositionField parseFrom(const struct CTORATstpQryPositionField& ori)
{
	struct LFQryPositionField res = {};
	memcpy(res.InstrumentID, ori.SecurityID, 31);
	FromToraExchangeId(res.ExchangeID, ori.ExchangeID);
	return res;
}

inline struct CTORATstpQryPositionField parseTo(const struct LFQryPositionField& lf)
{
	struct CTORATstpQryPositionField res = {};
	memcpy(res.SecurityID, lf.InstrumentID, 31);
	ToToraExchangeId(res.ExchangeID, lf.ExchangeID);
	return res;
}

inline struct LFRspPositionField parseFrom(const struct CTORATstpPositionField& ori)
{
	struct LFRspPositionField res = {};
	memcpy(res.InstrumentID, ori.SecurityID, 31);
	res.YdPosition = ori.HistoryPos;
	res.Position = ori.CurrentPosition;
	memcpy(res.InvestorID, ori.InvestorID, 13);
	res.PositionCost = ori.TotalPosCost;
	res.HedgeFlag = LF_CHAR_Speculation;
	FromToraPosiDirection(res.PosiDirection, ori.MarketID);
	return res;
}

inline struct LFInputOrderField parseFrom(const struct CTORATstpInputOrderField& ori)
{
	struct LFInputOrderField res = {};
	memcpy(res.UserID, ori.InvestorID, 13);
	memcpy(res.InvestorID, ori.AccountID, 19);
	FromToraExchangeId(res.ExchangeID, ori.ExchangeID);
	memcpy(res.InstrumentID, ori.SecurityID, 31);
	memcpy(res.OrderRef, ori.OrderRef, 13);
	res.LimitPrice = ori.LimitPrice;
	res.Volume = ori.VolumeTotalOriginal;
	res.MinVolume = ori.MinVolume;
	res.TimeCondition = ori.TimeCondition;
	res.VolumeCondition = ori.VolumeCondition;
	res.OrderPriceType = ori.OrderPriceType;
	res.Direction = ori.Direction;
	res.OffsetFlag = LF_CHAR_Open;
	res.HedgeFlag = LF_CHAR_Speculation;
	res.ForceCloseReason = ori.ForceCloseReason;
	res.ContingentCondition = LF_CHAR_Immediately;
	return res;
}

inline struct CTORATstpInputOrderField parseTo(const struct LFInputOrderField& lf)
{
	struct CTORATstpInputOrderField res = {};
	memcpy(res.InvestorID, lf.UserID, 13);
	memcpy(res.AccountID, lf.InvestorID, 19);
	ToToraExchangeId(res.ExchangeID, lf.ExchangeID);
	memcpy(res.SecurityID, lf.InstrumentID, 31);
	memcpy(res.OrderRef, lf.OrderRef, 13);
	res.LimitPrice = lf.LimitPrice;
	res.VolumeTotalOriginal = lf.Volume;
	res.MinVolume = lf.MinVolume;
	res.TimeCondition = lf.TimeCondition;
	res.VolumeCondition = lf.VolumeCondition;
	res.OrderPriceType = lf.OrderPriceType;
	res.Direction = lf.Direction;
	res.ForceCloseReason = lf.ForceCloseReason;
	return res;
}

inline struct LFRtnOrderField parseFrom(const struct CTORATstpOrderField& ori)
{
	struct LFRtnOrderField res = {};
	memcpy(res.UserID, ori.InvestorID, 13);
	memcpy(res.InvestorID, ori.AccountID, 19);
	memcpy(res.InstrumentID, ori.SecurityID, 31);
	memcpy(res.OrderRef, ori.OrderRef, 13);
	FromToraExchangeId(res.ExchangeID, ori.ExchangeID);
	res.LimitPrice = ori.LimitPrice;
	res.VolumeTraded = ori.VolumeTraded;
	res.VolumeTotal = ori.VolumeTotal;
	res.VolumeTotalOriginal = ori.VolumeTotalOriginal;
	res.TimeCondition = ori.TimeCondition;
	res.VolumeCondition = ori.VolumeCondition;
	res.OrderPriceType = ori.OrderPriceType;
	res.Direction = ori.Direction;
	res.OffsetFlag = LF_CHAR_Open;
	res.HedgeFlag = LF_CHAR_Speculation;
	res.OrderStatus = ori.OrderStatus;
	res.KfOrderID = ori.RequestID;
	return res;
}

inline struct LFRtnTradeField parseFrom(const struct CTORATstpTradeField& ori)
{
	struct LFRtnTradeField res = {};
	memcpy(res.UserID, ori.InvestorID, 13);
	memcpy(res.InvestorID, ori.AccountID, 19);
	memcpy(res.InstrumentID, ori.SecurityID, 31);
	memcpy(res.OrderRef, ori.OrderRef, 13);
	FromToraExchangeId(res.ExchangeID, ori.ExchangeID);
	memcpy(res.TradeID, ori.TradeID, 21);
	memcpy(res.OrderSysID, ori.OrderSysID, 21);
	res.Price = ori.Price;
	res.Volume = ori.Volume;
	memcpy(res.TradingDay, ori.TradeDate, 9);
	memcpy(res.TradeTime, ori.TradeTime, 9);
	res.Direction = ori.Direction;
	res.OffsetFlag = LF_CHAR_Open;
	res.HedgeFlag = LF_CHAR_Speculation;
	return res;
}

inline struct LFOrderActionField parseFrom(const struct CTORATstpInputOrderActionField& ori)
{
	struct LFOrderActionField res = {};
	memcpy(res.InstrumentID, ori.SecurityID, 31);
	FromToraExchangeId(res.ExchangeID, ori.ExchangeID);
	memcpy(res.UserID, ori.InvestorID, 13);
	memcpy(res.OrderRef, ori.OrderRef, 13);
	memcpy(res.OrderSysID, ori.OrderSysID, 21);
	res.RequestID = ori.RequestID;
	res.ActionFlag = ori.ActionFlag;
	res.LimitPrice = ori.LimitPrice;
	res.VolumeChange = ori.VolumeChange;
	return res;
}

inline struct CTORATstpInputOrderActionField parseTo(const struct LFOrderActionField& lf)
{
	struct CTORATstpInputOrderActionField res = {};
	memcpy(res.SecurityID, lf.InstrumentID, 31);
	ToToraExchangeId(res.ExchangeID, lf.ExchangeID);
	memcpy(res.InvestorID, lf.UserID, 13);
	memcpy(res.OrderRef, lf.OrderRef, 13);
	memcpy(res.OrderSysID, lf.OrderSysID, 21);
	res.RequestID = lf.RequestID;
	res.ActionFlag = lf.ActionFlag;
	res.LimitPrice = lf.LimitPrice;
	res.VolumeChange = lf.VolumeChange;
	return res;
}

inline struct LFQryAccountField parseFrom(const struct CTORATstpQryTradingAccountField& ori)
{
	struct LFQryAccountField res = {};
	memcpy(res.InvestorID, ori.AccountID, 19);
	return res;
}

inline struct CTORATstpQryTradingAccountField parseTo(const struct LFQryAccountField& lf)
{
	struct CTORATstpQryTradingAccountField res = {};
	memcpy(res.AccountID, lf.InvestorID, 19);
	return res;
}

inline struct LFRspAccountField parseFrom(const struct CTORATstpTradingAccountField& ori)
{
	struct LFRspAccountField res = {};
	memcpy(res.InvestorID, ori.AccountID, 19);
	res.Deposit = ori.Deposit;
	res.Withdraw = ori.Withdraw;
	res.FrozenMargin = ori.FrozenMargin;
	res.FrozenCash = ori.FrozenCash;
	res.FrozenCommission = ori.FrozenCommission;
	res.CurrMargin = ori.CurrMargin;
	res.Commission = ori.Commission;
	res.Available = ori.Available;
	res.WithdrawQuota = ori.WithdrawQuota;
	return res;
}

#endif
